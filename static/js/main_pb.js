define(function(require, exports, module){
/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.main.ServerToClient', null, global);
goog.exportSymbol('proto.main.cancelQueue', null, global);
goog.exportSymbol('proto.main.clientMessageType', null, global);
goog.exportSymbol('proto.main.clientStatus', null, global);
goog.exportSymbol('proto.main.clientToServer', null, global);
goog.exportSymbol('proto.main.fullBoard', null, global);
goog.exportSymbol('proto.main.fullBoard.innerRow', null, global);
goog.exportSymbol('proto.main.playerMovement', null, global);
goog.exportSymbol('proto.main.serverMessageType', null, global);
goog.exportSymbol('proto.main.singleCellUpdate', null, global);
goog.exportSymbol('proto.main.squareType', null, global);
goog.exportSymbol('proto.main.squareValue', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.playerMovement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.playerMovement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.main.playerMovement.displayName = 'proto.main.playerMovement';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.playerMovement.prototype.toObject = function(opt_includeInstance) {
  return proto.main.playerMovement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.playerMovement} msg The msg instance to transform.
 * @return {!Object}
 */
proto.main.playerMovement.toObject = function(includeInstance, msg) {
  var f, obj = {
    oldx: jspb.Message.getFieldWithDefault(msg, 1, 0),
    oldy: jspb.Message.getFieldWithDefault(msg, 2, 0),
    newx: jspb.Message.getFieldWithDefault(msg, 3, 0),
    newy: jspb.Message.getFieldWithDefault(msg, 4, 0),
    id: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.playerMovement}
 */
proto.main.playerMovement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.playerMovement;
  return proto.main.playerMovement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.playerMovement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.playerMovement}
 */
proto.main.playerMovement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOldx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOldy(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNewx(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNewy(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.main.playerMovement} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.playerMovement.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.playerMovement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.playerMovement.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOldx();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getOldy();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getNewx();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getNewy();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = this.getId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 oldx = 1;
 * @return {number}
 */
proto.main.playerMovement.prototype.getOldx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.main.playerMovement.prototype.setOldx = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 oldy = 2;
 * @return {number}
 */
proto.main.playerMovement.prototype.getOldy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.main.playerMovement.prototype.setOldy = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 newx = 3;
 * @return {number}
 */
proto.main.playerMovement.prototype.getNewx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.main.playerMovement.prototype.setNewx = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 newy = 4;
 * @return {number}
 */
proto.main.playerMovement.prototype.getNewy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.main.playerMovement.prototype.setNewy = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 id = 5;
 * @return {number}
 */
proto.main.playerMovement.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.main.playerMovement.prototype.setId = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.cancelQueue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.cancelQueue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.main.cancelQueue.displayName = 'proto.main.cancelQueue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.cancelQueue.prototype.toObject = function(opt_includeInstance) {
  return proto.main.cancelQueue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.cancelQueue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.main.cancelQueue.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.cancelQueue}
 */
proto.main.cancelQueue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.cancelQueue;
  return proto.main.cancelQueue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.cancelQueue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.cancelQueue}
 */
proto.main.cancelQueue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.main.cancelQueue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.cancelQueue.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.cancelQueue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.cancelQueue.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.main.cancelQueue.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.main.cancelQueue.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.clientToServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.clientToServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.main.clientToServer.displayName = 'proto.main.clientToServer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.clientToServer.prototype.toObject = function(opt_includeInstance) {
  return proto.main.clientToServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.clientToServer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.main.clientToServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    which: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    movement: (f = msg.getMovement()) && proto.main.playerMovement.toObject(includeInstance, f),
    cancel: (f = msg.getCancel()) && proto.main.cancelQueue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.clientToServer}
 */
proto.main.clientToServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.clientToServer;
  return proto.main.clientToServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.clientToServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.clientToServer}
 */
proto.main.clientToServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.main.clientMessageType} */ (reader.readEnum());
      msg.setWhich(value);
      break;
    case 2:
      var value = /** @type {!proto.main.clientStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = new proto.main.playerMovement;
      reader.readMessage(value,proto.main.playerMovement.deserializeBinaryFromReader);
      msg.setMovement(value);
      break;
    case 4:
      var value = new proto.main.cancelQueue;
      reader.readMessage(value,proto.main.cancelQueue.deserializeBinaryFromReader);
      msg.setCancel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.main.clientToServer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.clientToServer.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.clientToServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.clientToServer.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getWhich();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = this.getMovement();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.main.playerMovement.serializeBinaryToWriter
    );
  }
  f = this.getCancel();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.main.cancelQueue.serializeBinaryToWriter
    );
  }
};


/**
 * optional clientMessageType which = 1;
 * @return {!proto.main.clientMessageType}
 */
proto.main.clientToServer.prototype.getWhich = function() {
  return /** @type {!proto.main.clientMessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.main.clientMessageType} value */
proto.main.clientToServer.prototype.setWhich = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional clientStatus status = 2;
 * @return {!proto.main.clientStatus}
 */
proto.main.clientToServer.prototype.getStatus = function() {
  return /** @type {!proto.main.clientStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.main.clientStatus} value */
proto.main.clientToServer.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional playerMovement movement = 3;
 * @return {?proto.main.playerMovement}
 */
proto.main.clientToServer.prototype.getMovement = function() {
  return /** @type{?proto.main.playerMovement} */ (
    jspb.Message.getWrapperField(this, proto.main.playerMovement, 3));
};


/** @param {?proto.main.playerMovement|undefined} value */
proto.main.clientToServer.prototype.setMovement = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.main.clientToServer.prototype.clearMovement = function() {
  this.setMovement(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.main.clientToServer.prototype.hasMovement = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional cancelQueue cancel = 4;
 * @return {?proto.main.cancelQueue}
 */
proto.main.clientToServer.prototype.getCancel = function() {
  return /** @type{?proto.main.cancelQueue} */ (
    jspb.Message.getWrapperField(this, proto.main.cancelQueue, 4));
};


/** @param {?proto.main.cancelQueue|undefined} value */
proto.main.clientToServer.prototype.setCancel = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.main.clientToServer.prototype.clearCancel = function() {
  this.setCancel(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.main.clientToServer.prototype.hasCancel = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.squareValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.squareValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.main.squareValue.displayName = 'proto.main.squareValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.squareValue.prototype.toObject = function(opt_includeInstance) {
  return proto.main.squareValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.squareValue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.main.squareValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: jspb.Message.getFieldWithDefault(msg, 1, 0),
    troops: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.squareValue}
 */
proto.main.squareValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.squareValue;
  return proto.main.squareValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.squareValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.squareValue}
 */
proto.main.squareValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwner(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTroops(value);
      break;
    case 3:
      var value = /** @type {!proto.main.squareType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.main.squareValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.squareValue.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.squareValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.squareValue.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOwner();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getTroops();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int32 owner = 1;
 * @return {number}
 */
proto.main.squareValue.prototype.getOwner = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.main.squareValue.prototype.setOwner = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 troops = 2;
 * @return {number}
 */
proto.main.squareValue.prototype.getTroops = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.main.squareValue.prototype.setTroops = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional squareType type = 3;
 * @return {!proto.main.squareType}
 */
proto.main.squareValue.prototype.getType = function() {
  return /** @type {!proto.main.squareType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.main.squareType} value */
proto.main.squareValue.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.fullBoard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.main.fullBoard.repeatedFields_, null);
};
goog.inherits(proto.main.fullBoard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.main.fullBoard.displayName = 'proto.main.fullBoard';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.main.fullBoard.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.fullBoard.prototype.toObject = function(opt_includeInstance) {
  return proto.main.fullBoard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.fullBoard} msg The msg instance to transform.
 * @return {!Object}
 */
proto.main.fullBoard.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowsList: jspb.Message.toObjectList(msg.getRowsList(),
    proto.main.fullBoard.innerRow.toObject, includeInstance),
    playersList: jspb.Message.getField(msg, 2),
    moveexecuted: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.fullBoard}
 */
proto.main.fullBoard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.fullBoard;
  return proto.main.fullBoard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.fullBoard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.fullBoard}
 */
proto.main.fullBoard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.main.fullBoard.innerRow;
      reader.readMessage(value,proto.main.fullBoard.innerRow.deserializeBinaryFromReader);
      msg.addRows(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addPlayers(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMoveexecuted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.main.fullBoard} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.fullBoard.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.fullBoard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.fullBoard.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.main.fullBoard.innerRow.serializeBinaryToWriter
    );
  }
  f = this.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = this.getMoveexecuted();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * repeated innerRow rows = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.main.fullBoard.innerRow>}
 */
proto.main.fullBoard.prototype.getRowsList = function() {
  return /** @type{!Array.<!proto.main.fullBoard.innerRow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.main.fullBoard.innerRow, 1));
};


/** @param {!Array.<!proto.main.fullBoard.innerRow>} value */
proto.main.fullBoard.prototype.setRowsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.main.fullBoard.innerRow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.main.fullBoard.innerRow}
 */
proto.main.fullBoard.prototype.addRows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.main.fullBoard.innerRow, opt_index);
};


proto.main.fullBoard.prototype.clearRowsList = function() {
  this.setRowsList([]);
};


/**
 * repeated string players = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.main.fullBoard.prototype.getPlayersList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.main.fullBoard.prototype.setPlayersList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.main.fullBoard.prototype.addPlayers = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.main.fullBoard.prototype.clearPlayersList = function() {
  this.setPlayersList([]);
};


/**
 * optional int32 moveExecuted = 3;
 * @return {number}
 */
proto.main.fullBoard.prototype.getMoveexecuted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.main.fullBoard.prototype.setMoveexecuted = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.fullBoard.innerRow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.main.fullBoard.innerRow.repeatedFields_, null);
};
goog.inherits(proto.main.fullBoard.innerRow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.main.fullBoard.innerRow.displayName = 'proto.main.fullBoard.innerRow';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.main.fullBoard.innerRow.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.fullBoard.innerRow.prototype.toObject = function(opt_includeInstance) {
  return proto.main.fullBoard.innerRow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.fullBoard.innerRow} msg The msg instance to transform.
 * @return {!Object}
 */
proto.main.fullBoard.innerRow.toObject = function(includeInstance, msg) {
  var f, obj = {
    columnList: jspb.Message.toObjectList(msg.getColumnList(),
    proto.main.squareValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.fullBoard.innerRow}
 */
proto.main.fullBoard.innerRow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.fullBoard.innerRow;
  return proto.main.fullBoard.innerRow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.fullBoard.innerRow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.fullBoard.innerRow}
 */
proto.main.fullBoard.innerRow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.main.squareValue;
      reader.readMessage(value,proto.main.squareValue.deserializeBinaryFromReader);
      msg.addColumn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.main.fullBoard.innerRow} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.fullBoard.innerRow.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.fullBoard.innerRow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.fullBoard.innerRow.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getColumnList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.main.squareValue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated squareValue column = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.main.squareValue>}
 */
proto.main.fullBoard.innerRow.prototype.getColumnList = function() {
  return /** @type{!Array.<!proto.main.squareValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.main.squareValue, 1));
};


/** @param {!Array.<!proto.main.squareValue>} value */
proto.main.fullBoard.innerRow.prototype.setColumnList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.main.squareValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.main.squareValue}
 */
proto.main.fullBoard.innerRow.prototype.addColumn = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.main.squareValue, opt_index);
};


proto.main.fullBoard.innerRow.prototype.clearColumnList = function() {
  this.setColumnList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.singleCellUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.singleCellUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.main.singleCellUpdate.displayName = 'proto.main.singleCellUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.singleCellUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.main.singleCellUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.singleCellUpdate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.main.singleCellUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0),
    value: (f = msg.getValue()) && proto.main.squareValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.singleCellUpdate}
 */
proto.main.singleCellUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.singleCellUpdate;
  return proto.main.singleCellUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.singleCellUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.singleCellUpdate}
 */
proto.main.singleCellUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 3:
      var value = new proto.main.squareValue;
      reader.readMessage(value,proto.main.squareValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.main.singleCellUpdate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.singleCellUpdate.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.singleCellUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.singleCellUpdate.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.main.squareValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.main.singleCellUpdate.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.main.singleCellUpdate.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.main.singleCellUpdate.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.main.singleCellUpdate.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional squareValue value = 3;
 * @return {?proto.main.squareValue}
 */
proto.main.singleCellUpdate.prototype.getValue = function() {
  return /** @type{?proto.main.squareValue} */ (
    jspb.Message.getWrapperField(this, proto.main.squareValue, 3));
};


/** @param {?proto.main.squareValue|undefined} value */
proto.main.singleCellUpdate.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.main.singleCellUpdate.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.main.singleCellUpdate.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.ServerToClient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.ServerToClient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.main.ServerToClient.displayName = 'proto.main.ServerToClient';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.ServerToClient.prototype.toObject = function(opt_includeInstance) {
  return proto.main.ServerToClient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.ServerToClient} msg The msg instance to transform.
 * @return {!Object}
 */
proto.main.ServerToClient.toObject = function(includeInstance, msg) {
  var f, obj = {
    which: jspb.Message.getFieldWithDefault(msg, 1, 0),
    board: (f = msg.getBoard()) && proto.main.fullBoard.toObject(includeInstance, f),
    update: (f = msg.getUpdate()) && proto.main.singleCellUpdate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.ServerToClient}
 */
proto.main.ServerToClient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.ServerToClient;
  return proto.main.ServerToClient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.ServerToClient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.ServerToClient}
 */
proto.main.ServerToClient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.main.serverMessageType} */ (reader.readEnum());
      msg.setWhich(value);
      break;
    case 2:
      var value = new proto.main.fullBoard;
      reader.readMessage(value,proto.main.fullBoard.deserializeBinaryFromReader);
      msg.setBoard(value);
      break;
    case 3:
      var value = new proto.main.singleCellUpdate;
      reader.readMessage(value,proto.main.singleCellUpdate.deserializeBinaryFromReader);
      msg.setUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.main.ServerToClient} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.ServerToClient.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.ServerToClient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.ServerToClient.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getWhich();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getBoard();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.main.fullBoard.serializeBinaryToWriter
    );
  }
  f = this.getUpdate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.main.singleCellUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * optional serverMessageType which = 1;
 * @return {!proto.main.serverMessageType}
 */
proto.main.ServerToClient.prototype.getWhich = function() {
  return /** @type {!proto.main.serverMessageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.main.serverMessageType} value */
proto.main.ServerToClient.prototype.setWhich = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional fullBoard board = 2;
 * @return {?proto.main.fullBoard}
 */
proto.main.ServerToClient.prototype.getBoard = function() {
  return /** @type{?proto.main.fullBoard} */ (
    jspb.Message.getWrapperField(this, proto.main.fullBoard, 2));
};


/** @param {?proto.main.fullBoard|undefined} value */
proto.main.ServerToClient.prototype.setBoard = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.main.ServerToClient.prototype.clearBoard = function() {
  this.setBoard(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.main.ServerToClient.prototype.hasBoard = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional singleCellUpdate update = 3;
 * @return {?proto.main.singleCellUpdate}
 */
proto.main.ServerToClient.prototype.getUpdate = function() {
  return /** @type{?proto.main.singleCellUpdate} */ (
    jspb.Message.getWrapperField(this, proto.main.singleCellUpdate, 3));
};


/** @param {?proto.main.singleCellUpdate|undefined} value */
proto.main.ServerToClient.prototype.setUpdate = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.main.ServerToClient.prototype.clearUpdate = function() {
  this.setUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.main.ServerToClient.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * @enum {number}
 */
proto.main.clientStatus = {
  READY: 0,
  UNREADY: 1,
  DISCONNECT: 2
};

/**
 * @enum {number}
 */
proto.main.clientMessageType = {
  CLIENTSTATUS: 0,
  PLAYERMOVEMENT: 1,
  CANCELQUEUE: 2
};

/**
 * @enum {number}
 */
proto.main.squareType = {
  EMPTY: 0,
  MOUNTAIN: 1,
  TOWN: 2,
  CAPITAL: 3
};

/**
 * @enum {number}
 */
proto.main.serverMessageType = {
  FULLBOARD: 0,
  SINGLECELLUPDATE: 1
};

goog.object.extend(exports, proto.main);
});
