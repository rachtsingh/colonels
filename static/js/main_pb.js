define(function(require, exports, module){

/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.main.Status', null, global);
goog.exportSymbol('proto.main.boardUpdate', null, global);
goog.exportSymbol('proto.main.boardUpdate.innerRow', null, global);
goog.exportSymbol('proto.main.playerStatus', null, global);
goog.exportSymbol('proto.main.squareType', null, global);
goog.exportSymbol('proto.main.squareValue', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.playerStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.playerStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.main.playerStatus.displayName = 'proto.main.playerStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.playerStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.main.playerStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.playerStatus} msg The msg instance to transform.
 * @return {!Object}
 */
proto.main.playerStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.playerStatus}
 */
proto.main.playerStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.playerStatus;
  return proto.main.playerStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.playerStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.playerStatus}
 */
proto.main.playerStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.main.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.main.playerStatus} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.playerStatus.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.playerStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.playerStatus.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional Status status = 1;
 * @return {!proto.main.Status}
 */
proto.main.playerStatus.prototype.getStatus = function() {
  return /** @type {!proto.main.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.main.Status} value */
proto.main.playerStatus.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.squareValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.main.squareValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.main.squareValue.displayName = 'proto.main.squareValue';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.squareValue.prototype.toObject = function(opt_includeInstance) {
  return proto.main.squareValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.squareValue} msg The msg instance to transform.
 * @return {!Object}
 */
proto.main.squareValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: jspb.Message.getFieldWithDefault(msg, 1, 0),
    troops: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.squareValue}
 */
proto.main.squareValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.squareValue;
  return proto.main.squareValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.squareValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.squareValue}
 */
proto.main.squareValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwner(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTroops(value);
      break;
    case 3:
      var value = /** @type {!proto.main.squareType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.main.squareValue} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.squareValue.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.squareValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.squareValue.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOwner();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getTroops();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional int32 owner = 1;
 * @return {number}
 */
proto.main.squareValue.prototype.getOwner = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.main.squareValue.prototype.setOwner = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 troops = 2;
 * @return {number}
 */
proto.main.squareValue.prototype.getTroops = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.main.squareValue.prototype.setTroops = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional squareType type = 3;
 * @return {!proto.main.squareType}
 */
proto.main.squareValue.prototype.getType = function() {
  return /** @type {!proto.main.squareType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.main.squareType} value */
proto.main.squareValue.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.boardUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.main.boardUpdate.repeatedFields_, null);
};
goog.inherits(proto.main.boardUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.main.boardUpdate.displayName = 'proto.main.boardUpdate';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.main.boardUpdate.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.boardUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.main.boardUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.boardUpdate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.main.boardUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowList: jspb.Message.toObjectList(msg.getRowList(),
    proto.main.boardUpdate.innerRow.toObject, includeInstance),
    playersList: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.boardUpdate}
 */
proto.main.boardUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.boardUpdate;
  return proto.main.boardUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.boardUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.boardUpdate}
 */
proto.main.boardUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.main.boardUpdate.innerRow;
      reader.readMessage(value,proto.main.boardUpdate.innerRow.deserializeBinaryFromReader);
      msg.addRow(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addPlayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.main.boardUpdate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.boardUpdate.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.boardUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.boardUpdate.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRowList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.main.boardUpdate.innerRow.serializeBinaryToWriter
    );
  }
  f = this.getPlayersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated innerRow row = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.main.boardUpdate.innerRow>}
 */
proto.main.boardUpdate.prototype.getRowList = function() {
  return /** @type{!Array.<!proto.main.boardUpdate.innerRow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.main.boardUpdate.innerRow, 1));
};


/** @param {!Array.<!proto.main.boardUpdate.innerRow>} value */
proto.main.boardUpdate.prototype.setRowList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.main.boardUpdate.innerRow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.main.boardUpdate.innerRow}
 */
proto.main.boardUpdate.prototype.addRow = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.main.boardUpdate.innerRow, opt_index);
};


proto.main.boardUpdate.prototype.clearRowList = function() {
  this.setRowList([]);
};


/**
 * repeated string players = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.main.boardUpdate.prototype.getPlayersList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.main.boardUpdate.prototype.setPlayersList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.main.boardUpdate.prototype.addPlayers = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.main.boardUpdate.prototype.clearPlayersList = function() {
  this.setPlayersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.main.boardUpdate.innerRow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.main.boardUpdate.innerRow.repeatedFields_, null);
};
goog.inherits(proto.main.boardUpdate.innerRow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.main.boardUpdate.innerRow.displayName = 'proto.main.boardUpdate.innerRow';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.main.boardUpdate.innerRow.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.main.boardUpdate.innerRow.prototype.toObject = function(opt_includeInstance) {
  return proto.main.boardUpdate.innerRow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.main.boardUpdate.innerRow} msg The msg instance to transform.
 * @return {!Object}
 */
proto.main.boardUpdate.innerRow.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueList: jspb.Message.toObjectList(msg.getValueList(),
    proto.main.squareValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.main.boardUpdate.innerRow}
 */
proto.main.boardUpdate.innerRow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.main.boardUpdate.innerRow;
  return proto.main.boardUpdate.innerRow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.main.boardUpdate.innerRow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.main.boardUpdate.innerRow}
 */
proto.main.boardUpdate.innerRow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.main.squareValue;
      reader.readMessage(value,proto.main.squareValue.deserializeBinaryFromReader);
      msg.addValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.main.boardUpdate.innerRow} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.boardUpdate.innerRow.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.main.boardUpdate.innerRow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.main.boardUpdate.innerRow.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.main.squareValue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated squareValue value = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.main.squareValue>}
 */
proto.main.boardUpdate.innerRow.prototype.getValueList = function() {
  return /** @type{!Array.<!proto.main.squareValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.main.squareValue, 1));
};


/** @param {!Array.<!proto.main.squareValue>} value */
proto.main.boardUpdate.innerRow.prototype.setValueList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.main.squareValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.main.squareValue}
 */
proto.main.boardUpdate.innerRow.prototype.addValue = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.main.squareValue, opt_index);
};


proto.main.boardUpdate.innerRow.prototype.clearValueList = function() {
  this.setValueList([]);
};


/**
 * @enum {number}
 */
proto.main.Status = {
  READY: 0,
  UNREADY: 1,
  DISCONNECT: 2
};

/**
 * @enum {number}
 */
proto.main.squareType = {
  EMPTY: 0,
  MOUNTAIN: 1,
  TOWN: 2,
  CAPITAL: 3
};

goog.object.extend(exports, proto.main);
});
