// Code generated by protoc-gen-go.
// source: main.proto
// DO NOT EDIT!

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	main.proto

It has these top-level messages:
	PlayerMovement
	CancelQueue
	ClientToServer
	SquareValue
	FullBoard
	SingleCellUpdate
	ServerToClient
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//
// Submessage types for communicating from the client to the server
type ClientStatus int32

const (
	ClientStatus_Ready      ClientStatus = 0
	ClientStatus_Unready    ClientStatus = 1
	ClientStatus_Disconnect ClientStatus = 2
)

var ClientStatus_name = map[int32]string{
	0: "Ready",
	1: "Unready",
	2: "Disconnect",
}
var ClientStatus_value = map[string]int32{
	"Ready":      0,
	"Unready":    1,
	"Disconnect": 2,
}

func (x ClientStatus) String() string {
	return proto.EnumName(ClientStatus_name, int32(x))
}
func (ClientStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

//
// Main message type to communicate from the client to the server.
// The `which` enum identifies how the server should decode it, and
// the corresponding field in the clientToServer message should be
// filled in. Other data is thrown away.
//
// I don't know how I feel about wrapping things. I would prefer to avoid
// it if at all possible.
type ClientMessageType int32

const (
	ClientMessageType_ClientStatus   ClientMessageType = 0
	ClientMessageType_PlayerMovement ClientMessageType = 1
	ClientMessageType_CancelQueue    ClientMessageType = 2
)

var ClientMessageType_name = map[int32]string{
	0: "ClientStatus",
	1: "PlayerMovement",
	2: "CancelQueue",
}
var ClientMessageType_value = map[string]int32{
	"ClientStatus":   0,
	"PlayerMovement": 1,
	"CancelQueue":    2,
}

func (x ClientMessageType) String() string {
	return proto.EnumName(ClientMessageType_name, int32(x))
}
func (ClientMessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

//
// Submessage types for communicating from the server to the client
type SquareType int32

const (
	SquareType_Empty    SquareType = 0
	SquareType_Mountain SquareType = 1
	SquareType_Town     SquareType = 2
	SquareType_Capital  SquareType = 3
)

var SquareType_name = map[int32]string{
	0: "Empty",
	1: "Mountain",
	2: "Town",
	3: "Capital",
}
var SquareType_value = map[string]int32{
	"Empty":    0,
	"Mountain": 1,
	"Town":     2,
	"Capital":  3,
}

func (x SquareType) String() string {
	return proto.EnumName(SquareType_name, int32(x))
}
func (SquareType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

//
// Main message to communicate from server to client.
// See client to server above.
type ServerMessageType int32

const (
	ServerMessageType_FullBoard        ServerMessageType = 0
	ServerMessageType_SingleCellUpdate ServerMessageType = 1
)

var ServerMessageType_name = map[int32]string{
	0: "FullBoard",
	1: "SingleCellUpdate",
}
var ServerMessageType_value = map[string]int32{
	"FullBoard":        0,
	"SingleCellUpdate": 1,
}

func (x ServerMessageType) String() string {
	return proto.EnumName(ServerMessageType_name, int32(x))
}
func (ServerMessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type PlayerMovement struct {
	Oldx int32 `protobuf:"varint,1,opt,name=oldx" json:"oldx,omitempty"`
	Oldy int32 `protobuf:"varint,2,opt,name=oldy" json:"oldy,omitempty"`
	Newx int32 `protobuf:"varint,3,opt,name=newx" json:"newx,omitempty"`
	Newy int32 `protobuf:"varint,4,opt,name=newy" json:"newy,omitempty"`
	Id   int32 `protobuf:"varint,5,opt,name=id" json:"id,omitempty"`
}

func (m *PlayerMovement) Reset()                    { *m = PlayerMovement{} }
func (m *PlayerMovement) String() string            { return proto.CompactTextString(m) }
func (*PlayerMovement) ProtoMessage()               {}
func (*PlayerMovement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PlayerMovement) GetOldx() int32 {
	if m != nil {
		return m.Oldx
	}
	return 0
}

func (m *PlayerMovement) GetOldy() int32 {
	if m != nil {
		return m.Oldy
	}
	return 0
}

func (m *PlayerMovement) GetNewx() int32 {
	if m != nil {
		return m.Newx
	}
	return 0
}

func (m *PlayerMovement) GetNewy() int32 {
	if m != nil {
		return m.Newy
	}
	return 0
}

func (m *PlayerMovement) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CancelQueue struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CancelQueue) Reset()                    { *m = CancelQueue{} }
func (m *CancelQueue) String() string            { return proto.CompactTextString(m) }
func (*CancelQueue) ProtoMessage()               {}
func (*CancelQueue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CancelQueue) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ClientToServer struct {
	Which    ClientMessageType `protobuf:"varint,1,opt,name=which,enum=main.ClientMessageType" json:"which,omitempty"`
	Status   ClientStatus      `protobuf:"varint,2,opt,name=status,enum=main.ClientStatus" json:"status,omitempty"`
	Movement *PlayerMovement   `protobuf:"bytes,3,opt,name=movement" json:"movement,omitempty"`
	Cancel   *CancelQueue      `protobuf:"bytes,4,opt,name=cancel" json:"cancel,omitempty"`
}

func (m *ClientToServer) Reset()                    { *m = ClientToServer{} }
func (m *ClientToServer) String() string            { return proto.CompactTextString(m) }
func (*ClientToServer) ProtoMessage()               {}
func (*ClientToServer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ClientToServer) GetWhich() ClientMessageType {
	if m != nil {
		return m.Which
	}
	return ClientMessageType_ClientStatus
}

func (m *ClientToServer) GetStatus() ClientStatus {
	if m != nil {
		return m.Status
	}
	return ClientStatus_Ready
}

func (m *ClientToServer) GetMovement() *PlayerMovement {
	if m != nil {
		return m.Movement
	}
	return nil
}

func (m *ClientToServer) GetCancel() *CancelQueue {
	if m != nil {
		return m.Cancel
	}
	return nil
}

type SquareValue struct {
	Owner  int32      `protobuf:"varint,1,opt,name=owner" json:"owner,omitempty"`
	Troops int32      `protobuf:"varint,2,opt,name=troops" json:"troops,omitempty"`
	Type   SquareType `protobuf:"varint,3,opt,name=type,enum=main.SquareType" json:"type,omitempty"`
}

func (m *SquareValue) Reset()                    { *m = SquareValue{} }
func (m *SquareValue) String() string            { return proto.CompactTextString(m) }
func (*SquareValue) ProtoMessage()               {}
func (*SquareValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SquareValue) GetOwner() int32 {
	if m != nil {
		return m.Owner
	}
	return 0
}

func (m *SquareValue) GetTroops() int32 {
	if m != nil {
		return m.Troops
	}
	return 0
}

func (m *SquareValue) GetType() SquareType {
	if m != nil {
		return m.Type
	}
	return SquareType_Empty
}

type FullBoard struct {
	Rows         []*FullBoardInnerRow `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
	Players      []string             `protobuf:"bytes,2,rep,name=players" json:"players,omitempty"`
	MoveExecuted int32                `protobuf:"varint,3,opt,name=moveExecuted" json:"moveExecuted,omitempty"`
}

func (m *FullBoard) Reset()                    { *m = FullBoard{} }
func (m *FullBoard) String() string            { return proto.CompactTextString(m) }
func (*FullBoard) ProtoMessage()               {}
func (*FullBoard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FullBoard) GetRows() []*FullBoardInnerRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *FullBoard) GetPlayers() []string {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *FullBoard) GetMoveExecuted() int32 {
	if m != nil {
		return m.MoveExecuted
	}
	return 0
}

type FullBoardInnerRow struct {
	Column []*SquareValue `protobuf:"bytes,1,rep,name=column" json:"column,omitempty"`
}

func (m *FullBoardInnerRow) Reset()                    { *m = FullBoardInnerRow{} }
func (m *FullBoardInnerRow) String() string            { return proto.CompactTextString(m) }
func (*FullBoardInnerRow) ProtoMessage()               {}
func (*FullBoardInnerRow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

func (m *FullBoardInnerRow) GetColumn() []*SquareValue {
	if m != nil {
		return m.Column
	}
	return nil
}

type SingleCellUpdate struct {
	X     int32        `protobuf:"varint,1,opt,name=x" json:"x,omitempty"`
	Y     int32        `protobuf:"varint,2,opt,name=y" json:"y,omitempty"`
	Value *SquareValue `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *SingleCellUpdate) Reset()                    { *m = SingleCellUpdate{} }
func (m *SingleCellUpdate) String() string            { return proto.CompactTextString(m) }
func (*SingleCellUpdate) ProtoMessage()               {}
func (*SingleCellUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SingleCellUpdate) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *SingleCellUpdate) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *SingleCellUpdate) GetValue() *SquareValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type ServerToClient struct {
	Which  ServerMessageType `protobuf:"varint,1,opt,name=which,enum=main.ServerMessageType" json:"which,omitempty"`
	Board  *FullBoard        `protobuf:"bytes,2,opt,name=board" json:"board,omitempty"`
	Update *SingleCellUpdate `protobuf:"bytes,3,opt,name=update" json:"update,omitempty"`
}

func (m *ServerToClient) Reset()                    { *m = ServerToClient{} }
func (m *ServerToClient) String() string            { return proto.CompactTextString(m) }
func (*ServerToClient) ProtoMessage()               {}
func (*ServerToClient) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ServerToClient) GetWhich() ServerMessageType {
	if m != nil {
		return m.Which
	}
	return ServerMessageType_FullBoard
}

func (m *ServerToClient) GetBoard() *FullBoard {
	if m != nil {
		return m.Board
	}
	return nil
}

func (m *ServerToClient) GetUpdate() *SingleCellUpdate {
	if m != nil {
		return m.Update
	}
	return nil
}

func init() {
	proto.RegisterType((*PlayerMovement)(nil), "main.playerMovement")
	proto.RegisterType((*CancelQueue)(nil), "main.cancelQueue")
	proto.RegisterType((*ClientToServer)(nil), "main.clientToServer")
	proto.RegisterType((*SquareValue)(nil), "main.squareValue")
	proto.RegisterType((*FullBoard)(nil), "main.fullBoard")
	proto.RegisterType((*FullBoardInnerRow)(nil), "main.fullBoard.innerRow")
	proto.RegisterType((*SingleCellUpdate)(nil), "main.singleCellUpdate")
	proto.RegisterType((*ServerToClient)(nil), "main.ServerToClient")
	proto.RegisterEnum("main.ClientStatus", ClientStatus_name, ClientStatus_value)
	proto.RegisterEnum("main.ClientMessageType", ClientMessageType_name, ClientMessageType_value)
	proto.RegisterEnum("main.SquareType", SquareType_name, SquareType_value)
	proto.RegisterEnum("main.ServerMessageType", ServerMessageType_name, ServerMessageType_value)
}

func init() { proto.RegisterFile("main.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 600 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x54, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0xed, 0x26, 0x71, 0x9a, 0x8c, 0xf3, 0xb9, 0x9b, 0x51, 0xd5, 0xcf, 0x42, 0x42, 0xaa, 0x2c,
	0x10, 0x25, 0x82, 0x08, 0x19, 0x81, 0xb8, 0xe0, 0x8a, 0x50, 0x2e, 0x90, 0x2a, 0x81, 0x9b, 0xc2,
	0xf5, 0xd6, 0x1e, 0x5a, 0x4b, 0xce, 0xae, 0xf1, 0x4f, 0x13, 0xbf, 0x08, 0x8f, 0xc1, 0x73, 0xf0,
	0x58, 0xc8, 0xbb, 0x9b, 0x34, 0x4d, 0xcb, 0xdd, 0xce, 0xcc, 0xf1, 0xec, 0x39, 0x67, 0x8f, 0x0c,
	0xb0, 0x10, 0xa9, 0x9c, 0xe6, 0x85, 0xaa, 0x14, 0xf6, 0xda, 0x73, 0x90, 0x83, 0x97, 0x67, 0xa2,
	0xa1, 0xe2, 0x4c, 0xdd, 0xd0, 0x82, 0x64, 0x85, 0x08, 0x3d, 0x95, 0x25, 0x2b, 0x9f, 0x1d, 0xb3,
	0x13, 0x27, 0xd2, 0x67, 0xdb, 0x6b, 0xfc, 0xce, 0xa6, 0xd7, 0xb4, 0x3d, 0x49, 0xcb, 0x95, 0xdf,
	0x35, 0xbd, 0xf6, 0x6c, 0x7b, 0x8d, 0xdf, 0xdb, 0xf4, 0x1a, 0xf4, 0xa0, 0x93, 0x26, 0xbe, 0xa3,
	0x3b, 0x9d, 0x34, 0x09, 0x1e, 0x83, 0x1b, 0x0b, 0x19, 0x53, 0xf6, 0xb5, 0xa6, 0x9a, 0xec, 0x98,
	0x6d, 0xc6, 0x7f, 0x18, 0x78, 0x71, 0x96, 0x92, 0xac, 0xe6, 0xea, 0x9c, 0x8a, 0x1b, 0x2a, 0xf0,
	0x25, 0x38, 0xcb, 0xeb, 0x34, 0xbe, 0xd6, 0x28, 0x2f, 0xfc, 0x7f, 0xaa, 0x55, 0x18, 0xd0, 0x19,
	0x95, 0xa5, 0xb8, 0xa2, 0x79, 0x93, 0x53, 0x64, 0x50, 0x38, 0x81, 0x7e, 0x59, 0x89, 0xaa, 0x2e,
	0x35, 0x5d, 0x2f, 0xc4, 0x6d, 0xfc, 0xb9, 0x9e, 0x44, 0x16, 0x81, 0xaf, 0x60, 0xb0, 0xb0, 0xc2,
	0xb5, 0x10, 0x37, 0x3c, 0x34, 0xe8, 0xbb, 0xa6, 0x44, 0x1b, 0x14, 0x3e, 0x87, 0xbe, 0xa1, 0xaf,
	0x45, 0xba, 0xe1, 0xd8, 0x6e, 0xbf, 0x95, 0x14, 0x59, 0x40, 0x20, 0xc0, 0x2d, 0x7f, 0xd6, 0xa2,
	0xa0, 0x6f, 0x22, 0xab, 0x09, 0x0f, 0xc1, 0x51, 0x4b, 0x49, 0x85, 0x15, 0x6b, 0x0a, 0x3c, 0x82,
	0x7e, 0x55, 0x28, 0x95, 0x97, 0xd6, 0x5c, 0x5b, 0xe1, 0x13, 0xe8, 0x55, 0x4d, 0x4e, 0x9a, 0x95,
	0x17, 0x72, 0x73, 0x8b, 0x59, 0xa7, 0xc5, 0xea, 0x69, 0xf0, 0x9b, 0xc1, 0xf0, 0x47, 0x9d, 0x65,
	0x1f, 0x94, 0x28, 0x12, 0x7c, 0x01, 0xbd, 0x42, 0x2d, 0x4b, 0x9f, 0x1d, 0x77, 0x4f, 0xdc, 0xd0,
	0x37, 0xdf, 0x6c, 0xc6, 0xd3, 0x54, 0x4a, 0x2a, 0x22, 0xb5, 0x8c, 0x34, 0x0a, 0x7d, 0xd8, 0x37,
	0x2a, 0xdb, 0xab, 0xbb, 0x27, 0xc3, 0x68, 0x5d, 0x62, 0x00, 0xa3, 0x56, 0xef, 0xe9, 0x8a, 0xe2,
	0xba, 0xa2, 0xc4, 0x3e, 0xf1, 0x9d, 0xde, 0xa3, 0x37, 0x30, 0x58, 0xef, 0xd3, 0x9e, 0xa8, 0xac,
	0x5e, 0x48, 0x7b, 0xf3, 0x78, 0x9b, 0xad, 0x16, 0x1f, 0x59, 0x40, 0xf0, 0x1d, 0x78, 0x99, 0xca,
	0xab, 0x8c, 0x66, 0x94, 0x65, 0x17, 0x79, 0x22, 0x2a, 0xc2, 0x11, 0xb0, 0x75, 0xdc, 0xd8, 0xaa,
	0xad, 0xd6, 0x41, 0x63, 0x0d, 0x3e, 0x03, 0xe7, 0xa6, 0x5d, 0x60, 0x5f, 0xe7, 0x81, 0xcd, 0x66,
	0x1e, 0xfc, 0x62, 0xe0, 0x99, 0xbc, 0xcc, 0xd5, 0x4c, 0x3f, 0xf5, 0x3f, 0x72, 0x53, 0x6a, 0xd0,
	0x03, 0xb9, 0x79, 0x0a, 0xce, 0x65, 0xeb, 0x93, 0xbe, 0xdc, 0x0d, 0x0f, 0x76, 0xec, 0x8b, 0xcc,
	0x14, 0xa7, 0xd0, 0xaf, 0x35, 0x6f, 0x4b, 0xe9, 0xc8, 0xae, 0xdd, 0x51, 0x15, 0x59, 0xd4, 0xe4,
	0x2d, 0x8c, 0xb6, 0xa3, 0x87, 0x43, 0x70, 0x22, 0x12, 0x49, 0xc3, 0xf7, 0xd0, 0x85, 0xfd, 0x0b,
	0x59, 0xe8, 0x82, 0xa1, 0x07, 0xf0, 0x31, 0x2d, 0x63, 0x25, 0x25, 0xc5, 0x15, 0xef, 0x4c, 0x3e,
	0xc3, 0xf8, 0x5e, 0xc4, 0x91, 0xc3, 0x68, 0xb6, 0xb5, 0x8c, 0xef, 0x21, 0x82, 0xf7, 0xe5, 0x4e,
	0x56, 0x39, 0xc3, 0x03, 0x70, 0x67, 0xb7, 0x79, 0xe4, 0x9d, 0xc9, 0x7b, 0x80, 0xdb, 0xe8, 0xb4,
	0x0c, 0x4e, 0x17, 0x79, 0xd5, 0x32, 0x18, 0xc1, 0xe0, 0x4c, 0xd5, 0xb2, 0x12, 0xa9, 0xe4, 0x0c,
	0x07, 0xd0, 0x9b, 0xab, 0xa5, 0xe4, 0x9d, 0x96, 0xd9, 0x4c, 0xe4, 0x69, 0x25, 0x32, 0xde, 0x9d,
	0xbc, 0x83, 0xf1, 0x3d, 0xd3, 0xf0, 0x3f, 0x18, 0x7e, 0x5a, 0x5b, 0xc3, 0xf7, 0xf0, 0x10, 0xf8,
	0xf9, 0x8e, 0x03, 0x9c, 0x5d, 0xf6, 0xf5, 0xaf, 0xe6, 0xf5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xdc, 0xb4, 0x79, 0x0d, 0x78, 0x04, 0x00, 0x00,
}
